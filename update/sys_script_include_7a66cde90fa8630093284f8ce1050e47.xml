<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_122630_kpn_siam.kpnSiamReqUtils</api_name>
        <client_callable>false</client_callable>
        <description>KPN SIAM Request Script Includes&#13;
&#13;
Make sure the following tables have cross scope access enabled: &#13;
- sc_cat_item (CRUD)&#13;
- sc_item_option_new (CRUD)&#13;
- catalog_ui_policy (CRUD)&#13;
- catalog_ui_policy_action (CRUD)&#13;
- catalog_script_client (CRUD)&#13;
- etc.</description>
        <name>kpnSiamReqUtils</name>
        <script><![CDATA[var kpnSiamReqUtils = Class.create();
kpnSiamReqUtils.prototype = {
	initialize: function() {
		this.su = new kpnSiamUtils();
		var log;
	},
	
	sendSiamRequest: function(requestedItem) {
		// This function sends the information from the current requested Item
		// to the SIAM instance. Once the information is send the SIAM instance
		// will update the state of the current request item record
		log = this.su.logDebugRule('1. kpnSiamReqUtils.sendSiamRequest');
		
		// Get the URL property for the SIAM Instance
		var siamUrl = gs.getProperty('x_122630_kpn_siam.kpn.siam.base.url');
		var postUrl = this._createPostURL(siamUrl,requestedItem.cat_item);
		log = this.su.logDebugRule('2. Send SIAM Request to URL: '+postUrl);
		
		// Create the actual request (including the variables)
		var messageJson = this._createMessage(requestedItem);
		var suppReqId = this._createSupplierRequest(requestedItem,messageJson);
		log = this.su.logDebugRule('3. Send Message: '+messageJson);
		
		rm = new sn_ws.RESTMessageV2('SIAM Catalog Items', 'post_request');
		rm.setRequestBody(messageJson);
		rm.setEndpoint(postUrl);
		
		// Execute the API call
		var syncResponse = rm.execute();
		log = this.su.logDebugRule("4. "+syncResponse.getBody());
		log = this.su.logDebugRule("5. "+syncResponse.getErrorCode());
		this._updateSupplierRequest(suppReqId,syncResponse);
	},
	
	_createPostURL: function(baseUrl,catItem) {
		// Create the URL based on the baseUrl and the fixed part
		// Complete with the catalog API
		// https://nsservicenowsbx.service-now.com/api/sn_sc/servicecatalog/items/(sys_id)/order_now
		var siamUrl = baseUrl + '/api/sn_sc/servicecatalog/items/' + catItem + '/order_now';
		return siamUrl;
	},
	
	_createMessage: function(requestedItem) {
		//Get the object containing the catalog variables.
		var ritmVariables = requestedItem.variables;
		
		//Declare a fresh object.
		//This will be made to contain all of the variables and variable values for the RITM,
		//Then it will be pushed into the responseObj object.
		var variablesObject = {
		};
		var responseObj = {
		};
		responseObj.sysparm_quantity='1';
		
		//Iterate over ritmVariables, looping through each one as v.
		//This is necessary because the "requestedItem.variables" is not a standard JS object, and cannot be mapped.
		for (var v in ritmVariables) {
			var variableName = v.toString(); //Make sure we're all proper strings here.
			//pushing the variable into variablesObject,
			//which will be copied into responseObject along with a version of variablesObject.
			variablesObject[variableName] = ritmVariables[variableName].toString();
		}
		//Call _addObjToObj function to add variablesObject to responseObj '.
		responseObj = this._addObjToObj(responseObj, variablesObject, 'variables');
		
		var json = JSON.stringify(responseObj);
		
		log = this.su.logDebugRule("6. JSON message created: "+json);
		return json; //Returning the variables and their values.
		//Returning an object here will set the response "body" to the JSON equivalent of this object.
	},
	
	_addObjToObj: function(parent, child, name) {
		parent[name] = child;
		return parent;
	},
	
	_createSupplierRequest: function(requestedItem,messageJson) {
		// Create a record in the Supplier Requet table
		// to be able to track a request from the customer instance
		var suppReq = new GlideRecord('x_122630_kpn_siam_supplier_request');
		suppReq.initialize();
		suppReq.request = requestedItem.request;
		suppReq.requested_item = requestedItem.sys_id;
		suppReq.request_body = messageJson;
		var returnId = suppReq.insert();
		return returnId;
	},
	
	_updateSupplierRequest: function(suppReqId,syncResponse) {
		// Update the supplier Request after it has been sent to the SIAM Supplier instance
		var suppReq = new GlideRecord('x_122630_kpn_siam_supplier_request');
		suppReq.get(suppReqId);
		suppReq.state = 'in_process';
		suppReq.response_body = syncResponse.getBody();
		suppReq.error_code = syncResponse.getErrorCode();
		
		// Obtain the Request number from the SIAM instance and store this as a string (no reference)
		if (!syncResponse.haveError()) {
			var responseObject = JSON.parse(syncResponse.getBody());
			suppReq.supplier_request = responseObject.result.number;
		} else {
			log = this.su.logDebugRule('7. Unable to succesfull process this request in the SIAM instance');
		}
		// Update the Supplier Request
		suppReq.update();
	},
	
	syncCatalogItems: function() {
		log = this.su.logDebugRule('8. kpnSiamReqUtils.syncCatalogItems');
		// Get the URL property
		var siamUrl = gs.getProperty('x_122630_kpn_siam.kpn.siam.base.url');
		
		// Obtain the URL for the SIAM Instance
		var catalogUrl = this._createCatalogURL(siamUrl);
		log = this.su.logDebugRule('9. Send message to URL:'+catalogUrl);
		
		// Get the catalog sysID from the SIAM Instance
		var siamCatalog = gs.getProperty('x_122630_kpn_siam.kpn.siam.source.catalog.sysid');
		
		// Get the category sysID from the SIAM Instance
		var siamCategory = gs.getProperty('x_122630_kpn_siam.kpn.siam.source.catalog.category.sysid');
		
		// Get the list of valid catalog items
		var restMessage = new sn_ws.RESTMessageV2('SIAM Catalog Items', 'get_catalog_items');
		restMessage.setEndpoint(catalogUrl);
		restMessage.setQueryParameter('sysparm_catalog',siamCatalog);
		restMessage.setQueryParameter('sysparm_category',siamCategory);
		
		// Execute the API call
		var syncResponse = restMessage.execute();
		log = this.su.logDebugRule("10. Response code "+ syncResponse.getStatusCode() + ". Body " + syncResponse.getBody());
		
		// If Catalog Items have been received without errors
		if (!syncResponse.haveError()) {
			
			// Obtain the Customer Catalog and Catalog Category from the properties
			// Get the catalog sysID from the Customer Instance
			var custCatalog = gs.getProperty('x_122630_kpn_siam.kpn.siam.customer.catalog.sysid');
			
			// Get the category sysID from the Customer Instance
			var custCategory = gs.getProperty('x_122630_kpn_siam.kpn.siam.customer.catalog.category.sysid');
			
			// Get the SIAM Workflow
			var custWorkflow = gs.getProperty('x_122630_kpn_siam.kpn.siam.customer.workflow.sysid');
			
			// check whether the SIAM Catalog Items exist in this ServiceNow environment
			var items = JSON.parse(syncResponse.getBody());
			var siamItemArray = [];
			
			for (var i=0; i < items.result.length; i++) {
				var element = items.result[i];
				
				log = this.su.logDebugRule("11. Process catalog item: "+ element.name);
				
				// Get the full definition of the catalog item from the SIAM Instance
				var siamItem = this._getSiamItem(element.sys_id,siamUrl);
				var siamItemFull = this._getSiamItemFull(element.sys_id,siamUrl); 
	
				log = this.su.logDebugRule("12. siamItem: "+ siamItem.name);
				log = this.su.logDebugRule("12. siamItem: "+ JSON.stringify(siamItem));
				
				// and determine whether the catalog item already exists using the sys id
				var catItemId = this._catItemExists(element.sys_id);
				
				if (!catItemId) {
					log = this.su.logDebugRule("13. Create new Catalog Item " + siamItem.name + " in the customer instance");
					log = this.su.logDebugRule("13. " + siamItem.toString());
					
					// Create a new catalog item using the sys_id from the SIAM instance
					var custItemId = this._storeCatItem(siamItem,siamItemFull,siamUrl,custCatalog,custCategory,custWorkflow);
					
					// Use the Customer Catalog Item sys_id to create the additional tables for this catalog item
					var varArray = this._storeCatItemVars(siamItem,siamUrl,custItemId);
					
					this._storeCatItemUiPolicies(siamItem,siamUrl,custItemId,varArray);
					this._storeCatItemScripts(siamItem,siamUrl,custItemId,varArray);
					
					log = this.su.logDebugRule("13. Completed creation of Catalog Item "+siamItem.name);
				} else {
					log = this.su.logDebugRule("14. Update Catalog Item" + siamItem.name + " in the customer instance");
					// Update the catalog item using the data from the SIAM Instance
					// (if any changes have been made)
					this._updateCatItem(siamItem,siamItemFull,catItemId,siamUrl);
					
					log = this.su.logDebugRule("14. Completed update of Catalog Item "+siamItem.name);
					// this._update
				}
				// fill the itemArray with catalog items that have been received from the SIAM instance
				siamItemArray.push(siamItem.sys_id.toString());
			}
			
			// Now check whether we have items in the Customer instance that have been deactivated or removed from the SIAM instance
			// by comparing the currently available active catalog items with the ones read from the KPN instance
			var activeCustItem = new GlideRecord('sc_cat_item');
			activeCustItem.addQuery('category',custCategory);
			activeCustItem.addQuery('sc_catalogs','CONTAINS',custCatalog);
			activeCustItem.addActiveQuery();
			activeCustItem.query();
			while (activeCustItem.next()) {
				var checkValue = activeCustItem.sys_id.toString();
				if (siamItemArray.indexOf(checkValue) == -1) {
					activeCustItem.active = false;
					log = this.su.logDebugRule("15.c Deactivate Catalog Item" + activeCustItem.name + " in the customer instance");
					
					activeCustItem.update();
				}
			}
			
		} else {
			log = this.su.logDebugRule('16. Error Code:'+syncResponse.getErrorCode()+', '+syncResponse.getErrorMessage());
		}
	},
	
	_createCatalogURL: function(baseUrl) {
		// Create the URL based on the baseUrl and the fixed part
		// Complete with the catalog API
		var siamUrl = baseUrl;
		siamUrl += '/api/sn_sc/servicecatalog/items';
		
		return siamUrl;
	},
	
	_catItemExists: function(itemSysid) {
		var returnId;
		var checkItem = new GlideRecord('sc_cat_item');
		if (checkItem.get(itemSysid)) {
			returnId = checkItem.sys_id;
		}
		
		return returnId;
	},
	
	_storeCatItem: function(siamItem,siamItemFull,siamUrl,custCatalog,custCategory,custWorkflow) {
		var catItemId;
		
		// Build the catalog item in this environment
		var catItem = new GlideRecord('sc_cat_item');
		catItem.initialize();
		catItem = this._fillCatItem(catItem,siamItemFull,custCatalog,custCategory,custWorkflow);
		
		// Store the information using the sys_id from the SIAM Instance
		catItem.setNewGuidValue(siamItem.sys_id);
		catItemId = catItem.insert();
		
		return catItemId;
	},
	
	_storeCatItemVars: function(siamItem,siamUrl,catItemId) {
		var varArray = [];
		
		log = this.su.logDebugRule("16. Catalog Item "+siamItem.name+ " has " + siamItem.variables.length + " variables.");
		
		// Loop through the variables for this item
		// and store the variables
		for (var vIdx=0;vIdx < siamItem.variables.length;vIdx++) {
			var siamVariableSysid = siamItem.variables[vIdx].id;
			log = this.su.logDebugRule("17. Catalog Item "+siamItem.name+ " - get variable " + siamVariableSysid);
			
			var siamVariable = this._getSiamVariable(siamVariableSysid,siamUrl);
			
			// Fill the variable in the Item_option_new table
			var itemVariable = new GlideRecord('item_option_new');
			itemVariable.initialize();
			itemVariable = this._fillVariable(itemVariable,catItemId,siamVariable);
			
			log = this.su.logDebugRule("18. Catalog Item "+siamItem.name+ " create variable " + itemVariable.name);
			
			// Store the information
			var itemVarId = itemVariable.insert();
			
			// now also push these values into the array with variable sys_ids
			// this is required to set the UI policies
			varArray.push({custId: itemVarId, siamId: siamVariable.sys_id
			});
			
			if (siamItem.variables[vIdx].choices) {
				// If choices exist for this variable
				// store the choices for this variable
				if (siamItem.variables[vIdx].choices.length > 0) {
					for (var cIdx=0;cIdx < siamItem.variables[vIdx].choices.length;cIdx++) {
						var siamVarChoice = siamItem.variables[vIdx].choices[cIdx];
						
						// Initialize the choice
						var itemVarChoice = new GlideRecord('question_choice');
						itemVarChoice.initialize();
						
						// Fill the record
						itemVarChoice = this._fillVariableChoice(itemVarChoice,itemVarId,siamVarChoice);
						itemVarChoice.insert();
					}
				}
			}
		}
		
		return varArray;
	},
	
	_storeCatItemUiPolicies: function(siamItem,siamUrl,catItemId,varArray) {
		log = this.su.logDebugRule("13.a _storeCatItemUiPolicies");
		// Do the same for UI Policies & their actions
		for (var pIdx=0;pIdx < siamItem.ui_policy.length;pIdx++) {
			log = this.su.logDebugRule("13.b ui_policy.name: "+siamItem.ui_policy[pIdx].name);
			
			var siamPolicySysid = siamItem.ui_policy[pIdx].sys_id;
			var siamPolicy = this._getSiamPolicy(siamPolicySysid,siamUrl);
			log = this.su.logDebugRule("13.c siamPolicy: "+siamPolicy.name);
			
			// Fill the variable in the Item_option_new table
			var itemPolicy = new GlideRecord('catalog_ui_policy');
			itemPolicy.initialize();
			itemPolicy = this._fillPolicy(itemPolicy,catItemId,siamPolicy,varArray);
			
			// Store the information
			var itemPolicyId = itemPolicy.insert();
			
			if (siamItem.ui_policy[pIdx].actions) {
				log = this.su.logDebugRule("13.d Get the Policy actions.");
				
				// If actions exist for this policy
				// store the actions for this policy
				if (siamItem.ui_policy[pIdx].actions.length > 0) {
					log = this.su.logDebugRule("13.e process the actions: " + pIdx);
					
					for (var aIdx=0;aIdx < siamItem.ui_policy[pIdx].actions.length;aIdx++) {
						log = this.su.logDebugRule("13.f process the actions: " + aIdx);
						
						var siamPolicyAction = siamItem.ui_policy[pIdx].actions[aIdx];
						log = this.su.logDebugRule("13.g process the actions: " + siamPolicyAction.toString());
						
						// Initialize the action
						var itemPolicyAction = new GlideRecord('catalog_ui_policy_action');
						itemPolicyAction.initialize();
						
						// Fill the record
						itemPolicyAction = this._fillPolicyAction(itemPolicyAction,catItemId,itemPolicyId,siamPolicyAction,varArray);
						itemPolicyAction.insert();
					}
				}
			}
		}
	},
	
	_storeCatItemScripts: function(siamItem,siamUrl,catItemId,varArray) {
		// Do the same for Client Scipts
		var sIdx = 0;
		
		if (siamItem.client_script.onChange.length > -1 ) {
			// Loop through the client scripts for this item
			// and store the scripts
			for (sIdx=0;sIdx < siamItem.client_script.onChange.length;sIdx++) {
				this._storeCatItemScriptRecord(siamItem.client_script.onChange[sIdx].sys_id,siamUrl,catItemId,varArray);
			}
		}
		
		if (siamItem.client_script.onSubmit.length > -1) {
			// Loop through the client scripts for this item
			// and store the scripts
			for (sIdx=0;sIdx < siamItem.client_script.onSubmit.length;sIdx++) {
				this._storeCatItemScriptRecord(siamItem.client_script.onSubmit[sIdx].sys_id,siamUrl,catItemId,varArray);
			}
		}
		
		if (siamItem.client_script.onLoad.length > -1) {
			// Loop through the client scripts for this item
			// and store the scripts
			for (sIdx=0;sIdx < siamItem.client_script.onLoad.length;sIdx++) {
				this._storeCatItemScriptRecord(siamItem.client_script.onLoad[sIdx].sys_id,siamUrl,catItemId,varArray);
			}
		}
	},
	
	_storeCatItemScriptRecord: function(siamId,siamUrl,catItemId,varArray) {
		var siamScript = this._getSiamScript(siamId,siamUrl);
		// Fill the catalog client sript
		var itemScript = new GlideRecord('catalog_script_client');
		itemScript.initialize();
		itemScript = this._fillScript(itemScript,catItemId,siamScript,varArray);
		
		// Store the information
		itemScript.insert();
	},
	
	_updateCatItem: function(siamItem,siamItemFull,custItemId,siamUrl) {
		log = this.su.logDebugRule("51. _updateCatItem");
		// Obtain the Catalog Item from the customer instance
		var custItem = new GlideRecord('sc_cat_item');
		custItem.get(custItemId);
		log = this.su.logDebugRule("52. found: "+custItem.sys_id);
		
		// determine whether changes have been made in the SIAM Instance
		log = this.su.logDebugRule("52. difference? C:"+custItem.sys_updated_on+" <> S:"+siamItemFull.sys_updated_on);
		if (this._itemChanged(custItem.sys_updated_on,siamItemFull.sys_updated_on)) {
			log = this.su.logDebugRule("53. update the catalog item");
			
			// An update has been recognized in the SIAM instance
			// update the customer instance with the changes
			custItem = this._fillCatItem(custItem,siamItemFull,"","","");
			
			// Update the catalog item in this environment
			custItem.update();
		}
		
		// Now loop through the variables for this item
		// and update the variables (if required)
		for (var vIdx=0;vIdx < siamItem.variables.length;vIdx++) {
			var siamVariableSysid = siamItem.variables[vIdx].id;
			var siamVariable = this._getSiamVariable(siamVariableSysid,siamUrl);
			
			var custVariable = new GlideRecord('item_option_new');
			custVariable.initialize();
			custVariable = this._getCustVariable(custVariable,custItemId,siamVariable.name);
			
			var custVarId;
			// Fill the variable in the item_option_new table
			custVariable = this._fillVariable(custVariable,custItemId,siamVariable);
			
			if (custVariable.sys_id != "") {
				// Sys_id is filled, so we may need to update
				// determine whether changes have been made in the SIAM Instance
				if (this._itemChanged(custVariable.sys_updated_on,siamVariable.sys_updated_on)) {
					// An update has been recognized in the SIAM instance
					// update the customer instance with the changes
					custVariable.update();
					custVarId = custVariable.sys_id;
				}
			} else {
				// Insert the variable in this environment
				custVarId = custVariable.insert();
			}
			
			// If choices exist for this variable
			if (siamItem.variables[vIdx].choices) {
				// store/update the choices for this variable
				if (siamItem.variables[vIdx].choices.length > 0) {
					for (var cIdx=0;cIdx < siamItem.variables[vIdx].choices.length;cIdx++) {
						var siamVarChoice = siamItem.variables[vIdx].choices[cIdx];
						
						// Initialize the choice
						var custVarChoice = new GlideRecord('question_choice');
						custVarChoice.initialize();
						custVarChoice = this._getCustVariableChoice(custVarChoice,custVarId,siamVarChoice);
						
						// Fill the record
						custVarChoice = this._fillVariableChoice(custVarChoice,custVarId,siamVarChoice);
						if (custVarChoice.sys_id != "") {
							// Sys_id is filled, so we may need to update
							// determine whether changes have been made in the SIAM Instance
							if (this._itemChanged(custVarChoice.sys_updated_on,siamVarChoice.sys_updated_on)) {
								// An update has been recognized in the SIAM instance
								// update the customer instance with the changes
								custVarChoice.update();
							}
						} else {
							// Insert the variable choice in this environment
							custVarChoice.insert();
						}
					}
				}
			}
		}
	},
	
	_itemChanged: function(custDateStr,siamDateStr) {
		// Check whether the SIAM object is newer then
		// the last update of the Customer object
		var returnAnswer = false;
		var siamDate = new GlideDateTime(siamDateStr);
		var custDate = new GlideDateTime(custDateStr);
		if (siamDate > custDate) {
			returnAnswer = true;
		}
		return returnAnswer;
	},
	
	_getCustVariable: function(custVariable,custItemId,siamVariableName) {
		var readVariable = new GlideRecord('item_option_new');
		readVariable.addQuery('cat_item',custItemId);
		readVariable.addQuery('name',siamVariableName);
		readVariable.query();
		if (readVariable.next()) {
			custVariable = readVariable;
		}
		return custVariable;
	},
	
	_getCustVariableChoice: function(custVarChoice,custVarId,siamVarChoice) {
		var readVarChoice = new GlideRecord('question_choice');
		readVarChoice.addQuery('question',custVarId);
		readVarChoice.addQuery('value',siamVarChoice);
		readVarChoice.query();
		if (readVarChoice.next()) {
			custVarChoice = readVarChoice;
		}
		return custVarChoice;
	},
	
	_getSiamItem: function(itemSysid,baseUrl) {
		var siamItem = {
		};
		
		var itemUrl = baseUrl;
		itemUrl += '/api/sn_sc/servicecatalog/items/';
		itemUrl += itemSysid;
		
		rm = new sn_ws.RESTMessageV2('SIAM Catalog Items', 'get_catalog_item');
		rm.setEndpoint(itemUrl);
		
		// Execute the API call
		var itemResponse = rm.execute();
		
		// If Catalog Items have been received withoout errors
		// check whether they exist in this ServiceNow environment
		if (!itemResponse.haveError()) {
			log = this.su.logDebugRule("19. Catalog Item from SIAM instance: "+itemResponse.getBody());
			
			var	resultObject = JSON.parse(itemResponse.getBody());
			siamItem = resultObject.result;
		}
		return siamItem;
	},

	_getSiamItemFull: function(siamSysId,baseUrl) {
		var siamItem = this._getSiamObject(baseUrl,'sc_cat_item',siamSysId);
		return siamItem;
	},
	
	_getSiamVariable: function(siamVarSysId,baseUrl) {
		var siamVariable = this._getSiamObject(baseUrl,'item_option_new',siamVarSysId);
		return siamVariable;
	},
	
	_getSiamPolicy: function(siamPolicySysId,baseUrl) {
		var siamPolicy = this._getSiamObject(baseUrl,'catalog_ui_policy',siamPolicySysId);
		return siamPolicy;
	},
	
	_getSiamScript: function(siamScriptSysId,baseUrl) {
		var siamScript = this._getSiamObject(baseUrl,'catalog_script_client',siamScriptSysId);
		return siamScript;
	},
	
	_getSiamObject: function(baseUrl,table,sys_id) {
		var siamObject = {
		};
		// Get the record from the SIAM instance using the webservice
		var siamUrl = baseUrl;
		siamUrl += '/api/now/table/' + table + '/' + sys_id;
		log = this.su.logDebugRule("20. get information from URL "+siamUrl);
		
		rm = new sn_ws.RESTMessageV2('SIAM ServiceNow Table', 'get_table_entry');
		rm.setEndpoint(siamUrl);
		
		// Execute the API call
		var varResponse = rm.execute();
		log = this.su.logDebugRule("21. Response received: "+JSON.stringify(varResponse.getBody()));
		
		
		// If the message has been received withoout errors
		// parse the JSON into an object and return the object
		if (!varResponse.haveError()) {
			log = this.su.logDebugRule("22. Table (API) read from SIAM instance: "+varResponse.getBody());
			
			var	resultObject = JSON.parse(varResponse.getBody());
			siamObject = resultObject.result;
		}
		
		return siamObject;
	},
	
	_fillCatItem: function(catItem,siamItem,custCatalog,custCategory,custWorkflow) {
		catItem.active = true;
		catItem.availability = siamItem.availability;
		
		catItem.delivery_time = siamItem.delivery_time; 
		
		catItem.price = siamItem.price;
		catItem.recurring_frequency = siamItem.recurring_frequency; 
		catItem.recurring_price = siamItem.recurring_price; 
		catItem.show_price = siamItem.show_price;
		catItem.show_quantity = siamItem.show_quantity;
		catItem.order = siamItem.order;
		catItem.no_cart = siamItem.no_cart; 
		catItem.no_order = siamItem.no_order; 
		catItem.no_order_now = siamItem.no_order_now; 
		catItem.no_proceed_checkout = siamItem.no_proceed_checkout; 
		catItem.no_quantity = siamItem.no_quantity; 
		catItem.no_search = siamItem.no_search;	
		catItem.omit_price = siamItem.omit_price;	
		catItem.show_variable_help_on_load = siamItem.show_variable_help_on_load; 
		catItem.type = siamItem.type; 
		catItem.use_sc_layout = siamItem.use_sc_layout; 
		catItem.visible_bundle = siamItem.visible_bundle;
		catItem.visible_guide = siamItem.visible_guide; 
		catItem.visible_standalone = siamItem.visible_standalone; 
		
		// Only fill the below fields when the Customer Cat Item is new
		if (catItem.name == "") {
			catItem.name = siamItem.name;
			catItem.short_description = siamItem.short_description;
			catItem.description = siamItem.description;
			catItem.picture = siamItem.picture;
			catItem.icon = siamItem.icon;
		}
		// Only fill these fields with the initial call(create)
		if (custCatalog != '') {
			catItem.sc_catalogs = custCatalog;
		}
		if (custCategory != '') {
			catItem.category = custCategory;
		}
		if (custWorkflow != '') {
			catItem.workflow = custWorkflow;
		}
		
		return catItem;
	},
	
	_fillVariable: function(itemVariable,catItemId,siamVariable) {
		// Link to the Catalog Item
		itemVariable.cat_item = catItemId;
		
		// Now fill the other fields
		itemVariable.type = siamVariable.type;
		itemVariable.active = siamVariable.active;
		itemVariable.question_text = siamVariable.question_text;
		itemVariable.tooltip = siamVariable.tooltip;
		itemVariable.example_text = siamVariable.example_text;
		itemVariable.name = siamVariable.name;
		
		itemVariable.attributes = siamVariable.attributes;
		itemVariable.default_value = siamVariable.value;
		itemVariable.help_tag = siamVariable.help_tag;
		itemVariable.instructions = siamVariable.instructions;
		itemVariable.help_text = siamVariable.help_text;
		itemVariable.order = siamVariable.order;
		if (itemVariable.help_text) {
			itemVariable.show_help = true;
		}
		itemVariable.max_length = siamVariable.max_length;
		itemVariable.mandatory = siamVariable.mandatory;
		itemVariable.read_only = siamVariable.read_only;
		
		return itemVariable;
	},
	
	_fillVariableChoice: function(itemVarChoice,varId,siamVarChoice) {
		// Link to the Catalog Variable
		itemVarChoice.question = varId;
		
		itemVarChoice.order = siamVarChoice.index;
		itemVarChoice.misc = siamVarChoice.price;
		itemVarChoice.rec_misc = siamVarChoice.recurring_price;
		itemVarChoice.text = siamVarChoice.label;
		itemVarChoice.value = siamVarChoice.value;
		
		return itemVarChoice;
	},
	
	_fillPolicy: function(itemPolicy,catItemId,siamPolicy,varArray) {
		// Link to the Catalog Item
		itemPolicy.catalog_item = catItemId;
		
		itemPolicy.applies_to = siamPolicy.applies_to;
		itemPolicy.reverse_if_false = siamPolicy.reverse_if_false;
		itemPolicy.order = siamPolicy.order;
		itemPolicy.global = siamPolicy.global;
		itemPolicy.view = siamPolicy.view;
		itemPolicy.short_description = siamPolicy.short_description;
		
		// Catalog condition contain references to the fields.
		// These should be replaced by the new references
		itemPolicy.catalog_conditions = siamPolicy.catalog_conditions;
		log = this.su.logDebugRule("13.u _fillPolicy "+itemPolicy.short_description+", condition: <"+itemPolicy.catalog_conditions+">");
		// Modify the condition so the correct fields are used in this condition
		for (var i = 0; i < varArray.length; i++) {
			itemPolicy.catalog_conditions = itemPolicy.catalog_conditions.replace(varArray[i].siamId, varArray[i].custId);
		}
		log = this.su.logDebugRule("13.u _fillPolicy "+itemPolicy.short_description+", replaced : <"+itemPolicy.catalog_conditions+">");
		
		itemPolicy.on_load = siamPolicy.on_load;
		itemPolicy.run_scripts = siamPolicy.run_scripts;
		itemPolicy.active = siamPolicy.active;
		itemPolicy.script_true = siamPolicy.script_true;
		itemPolicy.script_false = siamPolicy.script_false;
		
		return itemPolicy;
	},
	
	_fillPolicyAction: function(itemPolicyAction,catItemId,uiPolicyId,siamPolicyAction,varArray) {
		// Link to the Catalog Item
		itemPolicyAction.catalog_item = catItemId;
		// Link to the Catalog UI Policy
		itemPolicyAction.ui_policy = uiPolicyId;
		var siamVarId = siamPolicyAction.name.replace("IO:", "");
		
		var varId;
		for (var i = 0; i < varArray.length; i++) {
			if (varArray[i].siamId == siamVarId) {
				varId = varArray[i].custId;
				break;
			}
		}
		
		itemPolicyAction.catalog_variable = "IO:"+varId;
		itemPolicyAction.mandatory = siamPolicyAction.mandatory;
		itemPolicyAction.visible = siamPolicyAction.visible;
		itemPolicyAction.disabled = siamPolicyAction.disabled;
		itemPolicyAction.cleared = siamPolicyAction.cleared;
		
		return itemPolicyAction;
	},
	
	_fillScript: function(itemScript,catItemId,siamScript,varArray) {
		// Link to the Catalog Item
		itemScript.cat_item = catItemId;
		itemScript.name = siamScript.name;
		itemScript.applies_to = siamScript.applies_to;
		itemScript.active = siamScript.active;
		itemScript.ui_type = siamScript.ui_type;
		itemScript.script = siamScript.script;
		itemScript.type = siamScript.type;
		itemScript.applies_catalog = siamScript.applies_catalog;
		itemScript.applies_req_item = siamScript.applies_req_item;
		itemScript.applies_sc_task = siamScript.applies_sc_task;
		
		var siamVarId = siamScript.cat_variable.replace("IO:", "");
		
		// If the siamScript is related to a catalog variable (on change)
		if (siamScript.cat_variable) {
			var varId;
			for (var i = 0; i < varArray.length; i++) {
				if (varArray[i].siamId == siamVarId) {
					varId = varArray[i].custId;
					break;
				}
			}
			itemScript.cat_variable = "IO:"+varId;
		}
		itemScript.variable_set = siamScript.variable_set;
		return itemScript;
	},
	
	type: 'kpnSiamReqUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-09-14 12:20:37</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>7a66cde90fa8630093284f8ce1050e47</sys_id>
        <sys_mod_count>246</sys_mod_count>
        <sys_name>kpnSiamReqUtils</sys_name>
        <sys_package display_value="KPN SIAM Service" source="x_122630_kpn_siam">5ce404e10f64630093284f8ce1050e45</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="KPN SIAM Service">5ce404e10f64630093284f8ce1050e45</sys_scope>
        <sys_update_name>sys_script_include_7a66cde90fa8630093284f8ce1050e47</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-11-08 14:41:38</sys_updated_on>
    </sys_script_include>
</record_update>
